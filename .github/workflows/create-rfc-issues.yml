name: Create RFC Issues for Copilot

# Manually trigger this workflow to create all RFC implementation issues
on:
  workflow_dispatch:
    inputs:
      create_milestone:
        description: 'Create RFC Implementation Phase milestone'
        required: true
        default: true
        type: boolean
      assignee_login:
        description: 'Optional login to assign all created RFC issues to (e.g., an agent account)'
        required: false
        type: string

permissions:
  issues: write
  contents: read

jobs:
  create-rfc-issues:
    runs-on: ubuntu-latest
    
    steps:
    - name: Get GitHub App token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create RFC Implementation Phase milestone (optional)
      if: ${{ inputs.create_milestone }}
      run: |
        gh --repo "${{ github.repository }}" api repos/${{ github.repository }}/milestones \
          --method POST \
          --field title="RFC Implementation Phase" \
          --field description="Implementation of all 9 RFC specifications for the dungeon crawler game" \
          --field state="open" || echo "Milestone may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
    
    - name: Prepare assignee flag
      id: assign
      run: |
        ASSIGNEE='${{ inputs.assignee_login }}'
        if [ -n "$ASSIGNEE" ]; then
          echo "flag=--assignee \"$ASSIGNEE\"" >> $GITHUB_OUTPUT
        else
          echo "flag=" >> $GITHUB_OUTPUT
        fi

    - name: Create RFC001 - Core Game Loop
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc001-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC001 according to docs/RFC/RFC001-Core-Game-Loop.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC001: Core Game Loop & State Management" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC002 - Terminal Application Shell
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc002-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC002 according to docs/RFC/RFC002-Terminal-Application-Shell.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC002: Terminal.Gui Application Shell" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC003 - Map Generation System
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc003-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC003 according to docs/RFC/RFC003-Map-Generation-System.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC003: Map Generation & Rendering System" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC004 - Player Movement System
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc004-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC004 according to docs/RFC/RFC004-Player-Movement-System.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC004: Player Entity & Movement System" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Create RFC005 - Combat System
      run: |
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC005: Combat Resolution Engine" \
          --body-file .github/issue-templates/rfc005-body.md \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC006 - Basic Inventory
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc006-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC006 according to docs/RFC/RFC006-Basic-Inventory.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC006: Basic Inventory System" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC007 - Message Log UI
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc007-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC007 according to docs/RFC/RFC007-Simple-UI-Messages.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC007: Simple Message Log UI" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC008 - Save Game System
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc008-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC008 according to docs/RFC/RFC008-Save-Game-Data.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC008: Save Game Data System" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC009 - Simple Enemy AI
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc009-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC009 according to docs/RFC/RFC009-Simple-Enemy-AI.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC009: Simple Enemy AI" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Create RFC010 - Health Status Bar
      run: |
        BODY_FILE=$(mktemp)
        cat .github/issue-templates/rfc010-body.md > "$BODY_FILE"
        if ! grep -q "<!-- copilot-activation:start -->" "$BODY_FILE"; then
          cat >> "$BODY_FILE" << 'EOF'

<!-- copilot-activation:start -->
## 🤖 Copilot Activation

@copilot Please implement RFC010 according to docs/RFC/RFC010-Health-Status-Bar.md. Create a feature branch, write tests (>80% coverage), and open a PR that includes "Closes #<issue>".
<!-- copilot-activation:end -->
EOF
        fi
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC010: Health and Status Bar UI" \
          --body-file "$BODY_FILE" \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Create RFC011 - Field-of-View and Fog-of-War
      run: |
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC011: Field-of-View and Fog-of-War" \
          --body-file .github/issue-templates/rfc011-body.md \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Create RFC012 - Configuration and Seed Management
      run: |
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC012: Configuration & Seed Management" \
          --body-file .github/issue-templates/rfc012-body.md \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Create RFC013 - Build/CI Quality Gates and Auto-merge
      run: |
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC013: Build/CI Quality Gates & Auto-merge Policy" \
          --body-file .github/issue-templates/rfc013-body.md \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Create RFC014 - UX Polish and Accessibility
      run: |
        gh --repo "${{ github.repository }}" issue create \
          --title "Implement RFC014: UX Polish & Accessibility" \
          --body-file .github/issue-templates/rfc014-body.md \
          --milestone "RFC Implementation Phase" \
          --label rfc-implementation \
          ${{ steps.assign.outputs.flag }} || echo "Issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
    
    - name: Create summary comment
      run: |
        echo "## 🎉 RFC Issues Created!" > summary.md
        echo "" >> summary.md
        echo "All 9 RFC implementation issues have been created and are ready for agent assignment." >> summary.md
        echo "" >> summary.md
        echo "### 🚀 Next Steps:" >> summary.md
        echo "1. **Assign to an Agent**: Optionally assign these to a bot/app or human reviewer" >> summary.md
        echo "2. **Start with Foundation**: Begin with RFC001 and RFC002 (high priority)" >> summary.md
        echo "3. **Monitor Progress**: Watch for draft pull requests from Copilot" >> summary.md
        echo "4. **Review and Iterate**: Provide feedback on Copilot's implementation" >> summary.md
        echo "" >> summary.md
        echo "### 📋 Issue Priority Order:" >> summary.md
        echo "- **🔥 Foundation (Start First)**: RFC001, RFC002" >> summary.md
        echo "- **⚡ Core Gameplay**: RFC003, RFC004, RFC009" >> summary.md  
        echo "- **🎨 Features**: RFC006, RFC007, RFC008, RFC010" >> summary.md
        echo "" >> summary.md
        echo "See AI-REVIEWERS.md for Gemini usage and review policies." >> summary.md
        
        gh --repo "${{ github.repository }}" issue create \
          --title "🤖 RFC Issues Created - Ready for Assignment" \
          --body-file summary.md \
          --milestone "RFC Implementation Phase" || echo "Summary issue may already exist"
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}
        
    - name: Workflow completion message
      run: |
        echo "✅ All RFC issues created successfully!"
        echo "🎯 Go to Issues tab to assign specific RFCs to your preferred agent"
        echo "📖 See AI-REVIEWERS.md for next steps"