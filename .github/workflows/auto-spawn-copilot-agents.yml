name: Auto-Spawn Copilot RFC Agents

on:
  # Trigger when RFC issues are ready for implementation
  issues:
    types: [labeled, assigned, edited]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      issue_numbers:
        description: 'Comma-separated issue numbers to spawn agents for'
        required: false
        type: string
        default: 'all'
      force_spawn:
        description: 'Force spawn even if already working'
        required: false
        type: boolean
        default: false

  # Schedule periodic check for ready RFCs
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes

env:
<<<<<<< HEAD
  COPILOT_MAX_CAPACITY: 10
=======
  COPILOT_MAX_CAPACITY: 100
>>>>>>> 83115e4 (fix: Increase capacity limit and fix sed parsing error in prepare script)

permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  scan-and-spawn:
    name: Scan for Ready RFCs and Spawn Copilot Agents
    runs-on: ubuntu-latest
    
    steps:
      - name: Get GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Copilot agents for ready RFCs
        run: |
          chmod +x .github/scripts/prepare-copilot-agents.sh
          
          # Determine parameters based on trigger
          FORCE_SPAWN="${{ github.event.inputs.force_spawn || 'false' }}"
          INPUT_ISSUES="${{ github.event.inputs.issue_numbers }}"
          MAX_CAPACITY="${{ env.COPILOT_MAX_CAPACITY }}"
          
          # Handle issue list parameter
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "$INPUT_ISSUES" ]; then
            if [ "$INPUT_ISSUES" == "all" ]; then
              ISSUE_LIST="auto"
            else
              ISSUE_LIST="$INPUT_ISSUES"
            fi
          else
            ISSUE_LIST="auto"
          fi
          
          ./.github/scripts/prepare-copilot-agents.sh "$FORCE_SPAWN" "$ISSUE_LIST" "$MAX_CAPACITY"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Update preparation status
        run: |
<<<<<<< HEAD
          WORKING=$(gh issue list --state open --label "copilot-working" --json number --jq 'length')
          PREPARED=$(gh issue list --state open --label "copilot-prepared" --json number --jq 'length')
          ACTIVE=$((WORKING + PREPARED))
          echo "## Copilot Agent Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Active Capacity**: $ACTIVE/${{ env.COPILOT_MAX_CAPACITY }} issues prepared/working (working: $WORKING, prepared: $PREPARED)" >> $GITHUB_STEP_SUMMARY  
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
=======
          ACTIVE_COUNT=$(gh issue list --state open --label "copilot-working" --json number --jq 'length')
          echo "## Copilot Agent Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Active Capacity**: $ACTIVE_COUNT/${{ env.COPILOT_MAX_CAPACITY }} agents working" >> $GITHUB_STEP_SUMMARY  
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
>>>>>>> c72adb7 (fix: Extract complex bash logic to separate script to resolve YAML parsing issues)
