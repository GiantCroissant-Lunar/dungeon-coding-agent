name: Auto-Create RFC Issues on Push

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/RFC/**'

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  create-rfc-issues:
    name: Create RFC issues for updated/new RFC docs
    runs-on: ubuntu-latest
    concurrency:
      group: rfc-issue-create-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mint GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Detect changed RFC files
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"
          # Fallback for first push (no before)
          if [[ -z "$BEFORE" || "$BEFORE" == "0000000000000000000000000000000000000000" ]]; then
            BEFORE=$(git rev-list --max-parents=0 HEAD | tail -n1)
          fi
          git fetch --no-tags --prune --depth=2 origin "+$AFTER:$AFTER" || true
          CHANGED=$(git diff --name-only "$BEFORE" "$AFTER" -- 'docs/RFC/*.md' | grep -E 'docs/RFC/RFC[0-9]{3}-.*\.md' | grep -v 'docs/RFC/README.md' || true)
          echo "Changed RFC files:\n$CHANGED"
          FILES=$(printf '%s' "$CHANGED" | paste -sd, - || true)
          echo "files=$FILES" >> "$GITHUB_OUTPUT"

      - name: Create issues for RFC docs (if missing)
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          FILES: ${{ steps.detect.outputs.files }}
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const filesCsv = process.env.FILES || '';
            const files = filesCsv.split(',').map(s => s.trim()).filter(Boolean);
            core.info(`Detected RFC files: ${files.join(', ')}`);
            if (files.length === 0) {
              core.info('No RFC files changed, skipping.');
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function ensureLabel(name, color, description) {
              try { await github.rest.issues.getLabel({ owner, repo, name }); }
              catch {
                try { await github.rest.issues.createLabel({ owner, repo, name, color, description }); }
                catch (e) { core.warning(`ensureLabel(${name}) failed or exists: ${e.message}`); }
              }
            }
            await ensureLabel('rfc-implementation','5319e7','Implementation tracked from RFC');
            await ensureLabel('agent-work','1D76DB','Work authored by an AI agent');
            await ensureLabel('ai-review-requested','8a2be2','AI review requested');

            async function issueExists(rfcNumber) {
              const q = `repo:${owner}/${repo} in:title RFC${rfcNumber} type:issue state:open`;
              const res = await github.rest.search.issuesAndPullRequests({ q });
              return res.data.items.some(it => new RegExp(`\\bRFC${rfcNumber}\\b`).test(it.title));
            }
            function sleep(ms){ return new Promise(r=>setTimeout(r,ms)); }
            for (const file of files) {
              const base = file.split('/').pop();
              const match = base.match(/^RFC(\d{3})-(.+)\.md$/);
              if (!match) continue;
              const rfcNumber = match[1];
              const titleText = match[2].replace(/-/g, ' ');
              const issueTitle = `RFC${rfcNumber}: ${titleText} - Implementation`;
              if (await issueExists(rfcNumber)) {
                core.info(`Issue for RFC${rfcNumber} already exists. Skipping.`);
                continue;
              }
              const body = [
                `This issue tracks implementation of RFC${rfcNumber}.`,
                '',
                `- RFC document: [${base}](./${file})`,
                '- Labels: rfc-implementation, agent-work, ai-review-requested',
                '',
                'Acceptance Criteria:',
                '- Satisfy all RFC acceptance criteria',
                '- Tests implemented and passing',
                '- Integrates with existing systems as specified'
              ].join('\n');
              let attempt=0, lastErr;
              while (attempt < 3) {
                try {
                  await github.rest.issues.create({ owner, repo, title: issueTitle, body, labels: ['rfc-implementation','agent-work','ai-review-requested'] });
                  core.info(`Created issue: ${issueTitle}`);
                  lastErr=null; break;
                } catch (e) {
                  lastErr=e; attempt++; core.warning(`issues.create failed (attempt ${attempt}): ${e.message}`);
                  await sleep(1000*attempt);
                }
              }
              if (lastErr) core.setFailed(`Failed to create issue for RFC${rfcNumber}: ${lastErr.message}`);
            }
