name: Nightly Reconcile RFC Issues

on:
  schedule:
    - cron: '30 3 * * *'  # nightly at 03:30 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

jobs:
  reconcile:
    name: Ensure each RFC doc has a corresponding open implementation issue
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Mint GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: List RFC docs
        id: list
        shell: bash
        run: |
          set -euo pipefail
          ls -1 docs/RFC/RFC*.md 2>/dev/null | grep -E 'docs/RFC/RFC[0-9]{3}-.+\.md' | grep -v 'docs/RFC/README.md' > rfc_list.txt || true
          echo "Found RFCs:" && cat rfc_list.txt || true
          echo "files=$(paste -sd, rfc_list.txt || true)" >> "$GITHUB_OUTPUT"

      - name: Create missing issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const core = require('@actions/core');
            const fs = require('fs');
            const filesCsv = process.env['FILES'] || '';
            const files = filesCsv.split(',').map(s => s.trim()).filter(Boolean);
            if (files.length === 0) {
              core.info('No RFC markdown files found. Nothing to do.');
              return;
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            async function issueExists(rfcNumber) {
              const q = `repo:${owner}/${repo} in:title RFC${rfcNumber} type:issue state:open`;
              const res = await github.rest.search.issuesAndPullRequests({ q });
              return res.data.items.some(it => new RegExp(`\\bRFC${rfcNumber}\\b`).test(it.title));
            }
            for (const file of files) {
              const base = file.split('/').pop();
              const m = base.match(/^RFC(\d{3})-(.+)\.md$/);
              if (!m) continue;
              const rfcNumber = m[1];
              const titleText = m[2].replace(/-/g, ' ');
              const issueTitle = `RFC${rfcNumber}: ${titleText} - Implementation`;
              if (await issueExists(rfcNumber)) {
                core.info(`Open issue already exists for RFC${rfcNumber}.`);
                continue;
              }
              const body = [
                `This issue tracks implementation of RFC${rfcNumber}.`,
                '',
                `- RFC document: [${base}](./${file})`,
                '- Labels: rfc-implementation, agent-work, ai-review-requested',
                '',
                'Acceptance Criteria:',
                '- Satisfy all RFC acceptance criteria',
                '- Tests implemented and passing',
                '- Integrates with existing systems as specified'
              ].join('\n');
              await github.rest.issues.create({
                owner,
                repo,
                title: issueTitle,
                body,
                labels: ['rfc-implementation', 'agent-work', 'ai-review-requested']
              });
              core.info(`Created issue: ${issueTitle}`);
            }
        env:
          FILES: ${{ steps.list.outputs.files }}
