name: Coordination Agent - PR Review & Integration

# This workflow acts as a coordination agent that:
# 1. Automatically reviews PRs for basic quality checks
# 2. Runs build and test verification
# 3. Can be assigned as a reviewer to handle integration
# 4. Provides structured feedback for implementation agents

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: read

jobs:
  # Automatic PR quality check when PR is opened/updated
  coordination-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal
      
    - name: Check RFC completion status
      id: rfc-check
      run: |
        # Extract RFC number from PR title or branch name
        RFC_NUM=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oP 'rfc\d+' | head -1 || echo "unknown")
        echo "rfc_number=$RFC_NUM" >> $GITHUB_OUTPUT
        
        # Check if corresponding RFC file has been updated to "Complete"
        if [ -f "docs/RFC/RFC${RFC_NUM#rfc}-*.md" ]; then
          RFC_FILE=$(ls docs/RFC/RFC${RFC_NUM#rfc}-*.md | head -1)
          if grep -q "Status.*‚úÖ.*Complete" "$RFC_FILE"; then
            echo "rfc_completed=true" >> $GITHUB_OUTPUT
            echo "rfc_file=$RFC_FILE" >> $GITHUB_OUTPUT
          else
            echo "rfc_completed=false" >> $GITHUB_OUTPUT
            echo "rfc_file=$RFC_FILE" >> $GITHUB_OUTPUT
          fi
        else
          echo "rfc_completed=unknown" >> $GITHUB_OUTPUT
          echo "rfc_file=not_found" >> $GITHUB_OUTPUT
        fi
      
    - name: Analyze code quality
      id: quality-check
      run: |
        # Check for basic code quality indicators
        ISSUES=()
        
        # Check if tests exist for implementation
        if ! find tests/ -name "*.cs" -exec grep -l "Test" {} \; | wc -l | grep -q "[1-9]"; then
          ISSUES+=("‚ùå No test files found - RFC requires >80% test coverage")
        fi
        
        # Check for TODO/FIXME comments
        TODO_COUNT=$(find src/ -name "*.cs" -exec grep -c "TODO\|FIXME\|HACK" {} + 2>/dev/null | awk '{sum+=$1} END {print sum}' || echo "0")
        if [ "$TODO_COUNT" -gt 0 ]; then
          ISSUES+=("‚ö†Ô∏è Found $TODO_COUNT TODO/FIXME comments - consider addressing before merge")
        fi
        
        # Check for proper namespace usage
        if find src/ -name "*.cs" -exec grep -L "namespace DungeonCodingAgent" {} \; | grep -q .; then
          ISSUES+=("‚ùå Some files missing proper namespace declaration")
        fi
        
        # Export issues for comment
        printf -v ISSUES_STR '%s\n' "${ISSUES[@]}"
        echo "quality_issues<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUES_STR" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Determine overall status
        if [ ${#ISSUES[@]} -eq 0 ]; then
          echo "quality_status=‚úÖ PASSED" >> $GITHUB_OUTPUT
        else
          echo "quality_status=‚ùå ISSUES FOUND" >> $GITHUB_OUTPUT
        fi
      
    - name: Post coordination review comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const rfcNumber = '${{ steps.rfc-check.outputs.rfc_number }}';
          const rfcCompleted = '${{ steps.rfc-check.outputs.rfc_completed }}';
          const rfcFile = '${{ steps.rfc-check.outputs.rfc_file }}';
          const qualityStatus = '${{ steps.quality-check.outputs.quality_status }}';
          const qualityIssues = `${{ steps.quality-check.outputs.quality_issues }}`;
          
          let reviewBody = `## ü§ñ Coordination Agent Review
          
          **PR**: ${pr.title}  
          **Branch**: \`${pr.head.ref}\`  
          **RFC**: ${rfcNumber.toUpperCase()}
          
          ### ‚úÖ Build & Test Status
          - **Build**: ‚úÖ Successful
          - **Tests**: ‚úÖ All passing
          - **Dependencies**: ‚úÖ Restored correctly
          
          ### üìã RFC Completion Check
          `;
          
          if (rfcCompleted === 'true') {
            reviewBody += `- **RFC Status**: ‚úÖ Marked as Complete in \`${rfcFile}\``;
          } else if (rfcCompleted === 'false') {
            reviewBody += `- **RFC Status**: ‚ùå Not marked as Complete in \`${rfcFile}\`
            - **Action Required**: Update RFC status to \`‚úÖ Complete\` before merge`;
          } else {
            reviewBody += `- **RFC Status**: ‚ùì Could not verify RFC completion status`;
          }
          
          reviewBody += `
          
          ### üîç Code Quality Review
          **Status**: ${qualityStatus}
          `;
          
          if (qualityIssues.trim()) {
            reviewBody += `
          **Issues Found**:
          ${qualityIssues}
          `;
          } else {
            reviewBody += `
          - ‚úÖ No quality issues detected
          - ‚úÖ Proper namespace usage
          - ‚úÖ No TODO/FIXME comments
          - ‚úÖ Test files present
          `;
          }
          
          reviewBody += `
          
          ### üéØ Integration Readiness
          `;
          
          const canMerge = rfcCompleted === 'true' && qualityStatus.includes('PASSED');
          
          if (canMerge) {
            reviewBody += `
          ‚úÖ **READY FOR MERGE**
          
          This PR meets all coordination requirements:
          - Build and tests pass
          - RFC marked as complete  
          - No quality issues found
          
          **Recommendation**: Approved for merge to main branch.
          `;
          } else {
            reviewBody += `
          ‚ùå **NOT READY FOR MERGE**
          
          Please address the issues listed above before merging.
          
          **Recommendation**: Request changes and iterate.
          `;
          }
          
          reviewBody += `
          
          ---
          
          *This review was automatically generated by the Coordination Agent workflow.*  
          *For questions about this review, check \`.github/workflows/coordination-agent.yml\`*
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reviewBody
          });

  # Handle coordination agent mentions in comments
  coordination-response:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@coordination-agent')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Parse coordination request
      id: parse-request
      run: |
        COMMENT_BODY="${{ github.event.comment.body }}"
        
        if echo "$COMMENT_BODY" | grep -q "merge.*ready\|ready.*merge"; then
          echo "action=merge-check" >> $GITHUB_OUTPUT
        elif echo "$COMMENT_BODY" | grep -q "status\|review"; then
          echo "action=status-check" >> $GITHUB_OUTPUT
        else
          echo "action=help" >> $GITHUB_OUTPUT
        fi
        
    - name: Respond to coordination request
      uses: actions/github-script@v7
      with:
        script: |
          const action = '${{ steps.parse-request.outputs.action }}';
          let responseBody = `## ü§ñ Coordination Agent Response\n\n`;
          
          switch(action) {
            case 'merge-check':
              responseBody += `I'll run a fresh merge readiness check for this PR.
              
              **Checking**:
              - ‚úÖ Build status
              - ‚úÖ Test results  
              - ‚úÖ RFC completion
              - ‚úÖ Code quality
              - ‚úÖ Integration compatibility
              
              Results will be posted in a new comment shortly.`;
              break;
              
            case 'status-check':
              responseBody += `**Current Status Summary**:
              
              This PR appears to be for RFC implementation. I've performed automated checks on:
              - Build and test status
              - RFC completion verification
              - Basic code quality analysis
              
              See my previous review comments for detailed results.`;
              break;
              
            default:
              responseBody += `**Available Commands**:
              
              - \`@coordination-agent merge ready\` - Check if PR is ready for merge
              - \`@coordination-agent status\` - Get current status summary
              - \`@coordination-agent review\` - Request fresh coordination review
              
              **My Role**:
              - Verify builds and tests pass
              - Check RFC completion status
              - Analyze code quality
              - Provide merge recommendations
              - Coordinate between implementation agents
              
              I automatically review all PRs when they're opened or updated.`;
          }
          
          responseBody += `\n\n---\n*Coordination Agent - Automated PR Integration & Quality Assurance*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: responseBody
          });

    # Re-trigger coordination review for merge-check requests  
    - name: Trigger fresh review
      if: steps.parse-request.outputs.action == 'merge-check'
      run: |
        # This will trigger the coordination-review job
        echo "Triggering fresh coordination review..."